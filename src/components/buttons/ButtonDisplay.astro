---
import StarSVG from "../svgs/StarSVG.astro";

interface Props {
  label: string;
  ariaLabel: string;
  href: string;
}

const { label, ariaLabel, href } = Astro.props;
---

<a class="button--display" aria-label={ariaLabel} href={href}>
  <div class="star-w">
    <StarSVG width="1rem" />
  </div>
  <div class="label">{label}</div>
  <div class="star-w">
    <StarSVG width="1rem" />
  </div>
</a>

<style lang="scss">
  .button--display {
    gap: 1rem;
    border: 1px solid var(--button-glass-outline);
    color: 1px solid var(--text);
    background-color: var(--button-glass-bg);
    border-radius: var(--radius-circular);
    justify-content: center;
    align-items: center;
    padding: 0.15rem 0.15rem 0.15rem 1.5rem;
    transition: all 0.25s;
    display: flex;
    position: relative;
    overflow: clip;
    justify-self: start;
    transform: translate(0);
    letter-spacing: -0.02em;
    font-family: var(--editorial-old);
    font-size: 1.6rem;
    font-style: italic;
    font-weight: 200;
    line-height: 100%;
    cursor: pointer;

    &:hover {
      border-color: var(--button-solid-bg);
      background-color: var(--button-glass-hover);
    }

    .label {
      padding-bottom: 0.05rem;
    }

    .star-w {
      display: flex;
      width: 3rem;
      aspect-ratio: 1 / 1;
      background-color: var(--button-solid-bg);
      color: var(--button-solid-text);
      border-radius: var(--radius-circular);
      flex: none;
      justify-content: center;
      align-items: center;

      &:nth-child(1) {
        position: absolute;
        top: auto;
        bottom: auto;
        left: -3rem;
        right: auto;
      }
    }
  }
</style>

<script>
  import gsap from "gsap";

  let buttonsGlass = document.querySelectorAll(
    ".button--display:not(.tertiary)"
  );

  const animateButton = (buttonGlass, moveStar, moveText, duration, ease) => {
    gsap.to(buttonGlass.querySelectorAll(".star-w"), {
      x: moveStar,
      duration: duration,
      ease: ease,
    });
    gsap.to(buttonGlass.querySelector(".label"), {
      x: moveText,
      duration: duration,
      ease: ease,
    });
  };

  buttonsGlass.forEach((buttonGlass) => {
    buttonGlass.addEventListener("mouseenter", (event) => {
      let starElement = buttonGlass.querySelector(".star-w");
      let starWidth = (starElement as HTMLElement)?.offsetWidth;
      let borderWidth = parseInt(
        window.getComputedStyle(buttonGlass).outlineWidth,
        10
      );
      let paddingRight = parseInt(
        window.getComputedStyle(buttonGlass).paddingRight,
        10
      );

      let moveStar = starWidth + borderWidth + paddingRight;
      let moveText = starWidth - paddingRight * 2;

      animateButton(buttonGlass, moveStar, moveText, 0.3, "power4");
    });

    buttonGlass.addEventListener("mouseleave", () => {
      animateButton(buttonGlass, 0, 0, 0.4, "power2");
    });
  });
</script>
