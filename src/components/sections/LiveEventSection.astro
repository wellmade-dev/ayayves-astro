---
import {
  fetchSingleTypeObject,
  fetchEvents,
  createImageObject,

} from "../../scripts/fetch";

import ImageWellmade from "../atoms/ImageWellmade.astro";
import HeadingMarquee from "../atoms/HeadingMarquee.astro";
import ButtonDisplayTertiary from "../atoms/buttons/ButtonDisplayTertiary.astro";
import Divider from "../atoms/Divider.astro";

const imageObject = await fetchSingleTypeObject("homepage", "live_hero_image")
const image = createImageObject(imageObject);

const eventObjects = await fetchEvents();
const activeEvents = eventObjects.filter(event => !event.expired);
const inactiveEvents = eventObjects.filter(event => event.expired);
const displayInactiveCount = 6 - activeEvents.length;
const events = activeEvents.concat(inactiveEvents.slice(0, displayInactiveCount))

---

<section class="section-events" data-theme="secondary">
  <div class="img-w">
    <ImageWellmade
      image={image}
      sizes="95vw"
    />
  </div>
  <div class="heading-w">
    <HeadingMarquee firstString="See Me " secondString="Live" />
  </div>
  <div class="events-w">
    <div class="events_info-w">
      {
        events.map((event) => (
          <div class="event-item" event-id={event.id}>
            <div class="event-item-inner">
              <div class="heading-400">{event.date_time}</div>
              <div class="heading-500">
                <span>{event.city}</span>, <span>{event.city_indigenous}</span>
              </div>
              <div class="button-w">
                {event.expired ? 
                  <ButtonDisplayTertiary label="Sold Out" disabled /> :
                  <ButtonDisplayTertiary label="Tickets" ariaLabel=`Buy tickets for the ${event.city} event on ${event.date_time}` href={event.ticket_link}/>            
                }
              </div>

            </div>

            <Divider animateHover />
          </div>
        ))
      }
    </div>
  </div>
</section>

<style lang="scss">
  @use "../../styles/vars" as *;
  .section-events {
  z-index: 5;
  border-top-left-radius: var(--radius-large);
  border-top-right-radius: var(--radius-large);
  background-color: var(--bg-dark);
  margin-left: auto;
  margin-right: auto;
  padding-left: var(--page-margin);
  padding-right: var(--page-margin);
  position: sticky;
  padding-top: var(--padding-800);
  padding-bottom: var(--padding-800);

  .heading-w {
    position: relative;
    margin-left: calc(-1 * var(--page-margin));
    margin-right: calc(-1 * var(--page-margin));
  }

  .img-w {
      flex-grow: 1;
      border-radius: var(--radius-medium);
      overflow: clip;
      width: 100%;
      height: 70vh;
      position: relative;
      margin-bottom: -11vw;

      @media (max-width: $mobile) {
          aspect-ratio: 1 / 1.4;
          height: unset;
      }

      img {
        position: absolute;
        top: auto;
        bottom: 0%;
        left: 0%;
        right: 0%;
        height: 130%;
        width: 100%;
        -o-object-fit: cover;
        object-fit: cover;
        will-transform: transform;
      }
  }

  .events-w {
      padding: 1vw var(--page-margin) 1rem;
      display: flex;
      justify-items: right;
      margin: 0 auto;
      max-width: $desktop-max;
      justify-content: flex-end;

      @media (max-width: $mobile) {
          padding: 1vw 0rem 1rem;
      }
  }

  .events_info-w {
      width: 100%;
      max-width: 40rem;
      align-self: start;
      display: flex;
      flex-direction: column;
      margin-top: 0.5rem;
      container-type: inline-size;

      &:hover > :not(:hover), &:focus > :not(:focus) {
        --text-opacity: 0.4;
      }

      @media (max-width: $tablet) {
          width: 100%;
          margin-top: 0;
          align-self: unset;
      }

      @media (max-width: $mobile) {
          padding-left: 0;
      }
  }
}

.event-item {
    display: flex;
    flex-direction: column;
    position: relative;
  
    &:hover, &:focus {
      --divider-fill: 100%;
      --divider-fill-speed: 0.6s;
    }

    .event-item-inner {
        display: grid;
        grid-template-columns: clamp(6.5rem, 7em, 7.5rem) 1fr auto;
        padding: 2.25rem 0.5rem;
        gap: 1rem;
        z-index: 5;
        position: relative;
        transition: color 0.4s ease;
        align-items: center;
        cursor: default;

        .heading-400, .heading-500 {
          opacity: var(--text-opacity);
          transition: opacity 0.4s ease;
        }

        @container (max-width: 30rem) {
            display: flex;
            flex-direction: column;
            align-items: start;
            gap: 0.45rem;
            padding: 1.75rem 0.5rem 1.6rem;

            .heading-400 {
                font-size: 1rem;
            }

            .button-w {
                margin-top: 0.5rem;
            }
        }
    }
}
</style>

<script>
  import gsap from "gsap";
  import { imageParallax } from "../../scripts/animations";

  function initLiveEventSection() {
    imageParallax(document.querySelector(".section-events img"), "top bottom", "bottom top", "0%", "30%",);
  }
  initLiveEventSection();

  const liveEventSection = document.querySelector(".section-events")!;
  const eventsWrapper = liveEventSection.querySelector(".events_info-w")!;
  const eventItems = liveEventSection.querySelectorAll(".event-item")!;

  eventItems.forEach(item => {
    const eventInner = item.querySelector(".event-item-inner")!;
    const innerElements = Array.from(eventInner.children);
    const dividerBackground = item.querySelector(".divider-bg")!;
    const dividerFill = item.querySelector(".divider-fill")!;
    
    gsap.set(innerElements, {
      y: "0.5rem",
      opacity: 0,
    });
    
    gsap.set(dividerBackground, {
      width: 0,
    });

    gsap.set(dividerFill, {
      display: "none",
    })
  });

  // Animate Events
  function animateEvents() {
    gsap.to(eventItems, {
      stagger: {
        each: 0.2,
        onStart: function(this: any) {
          const target = this.targets()[0];
          const eventInner = target.querySelector(".event-item-inner")!;
          const innerElements = Array.from(eventInner.children) as HTMLElement[];
          const dividerBackground = target.querySelector(".divider-bg")!;
          const dividerFill = target.querySelector(".divider-fill")!;
          
          gsap.to(innerElements, {
            duration: 0.5,
            opacity: 1,
            y: 0,
            stagger: {
              each: 0.15
            },
            onComplete: () => {
              innerElements.forEach(element => {
                element.removeAttribute('style');
              })
            }
          });
          
          gsap.to(dividerBackground, {
            width: "100%",
            duration: 0.5,
            onComplete: () => {
              gsap.set(dividerFill, {
                display: "block"
              })
            }
          });
        }
      }
    })
  }

  // Setup GSAP Timeline
  const tl = gsap.timeline({
		scrollTrigger: {
			trigger: eventsWrapper,
			start: "top 90%",
			end: "bottom 10%",
			once: true,
		},
	});

  tl.add(animateEvents, 0.1);
  
</script>