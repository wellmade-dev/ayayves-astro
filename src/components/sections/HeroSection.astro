---
import { fetchCatalogue } from "../../scripts/fetch";
import ImageWellmade from "../atoms/ImageWellmade.astro";
import Divider from "../atoms/Divider.astro";
import ButtonDisplay from "../atoms/buttons/ButtonDisplay.astro";
import CatalogueModal from "../atoms/modals/CatalogueModal.astro";
import type { CatalogueData } from "../../types/strapi-attributes";

async function fetchHeroRelease() {
  const catalogue = await fetchCatalogue();

  for (const release of catalogue) {
    if (release.released || release.presaveLive) {
      return release;
    }
  }
  return null;
}

const release = await fetchHeroRelease();
---

<section class="home section-hero" data-theme="overlay">
  <div class="background-w">
    <div class="bg-tint"></div>
    {
      release && release.musicVideo ? (
        <div class="bg-content video-w">
          <video
            preload="auto"
            loop=""
            muted="muted"
            playsinline="playsinline"
            autoplay=""
            height="100%"
            style="object-fit: cover;"
            aria-hidden="true"
            class="bg-content"
            src={release.musicVideo.src}
          ></video>
        </div>
      ) : release && release.keyImage ? (
        <ImageWellmade
          image={release.keyImage}
          sizes="100vw"
          class="bg-content"
          eagerLoading
        />
      ) : release && release.coverImage ? (
        <ImageWellmade
          image={release.coverImage}
          sizes="100vw"
          class="bg-content"
          eagerLoading
        />
      ) : (
        <div style="width: 100%, height: 100%, background-color: black" />
      )
    }
  </div>
  {
    release && (
      <div class="subsection-feature">
        <div class="feature_grid" release-status>
          <h2 class="heading-900" data-title>
            {release?.title}
          </h2>
          <div class="meta-w">
            {release.releaseType && (
              <div data-release-type class="heading-300">
                {release.releaseType}
              </div>
            )}
            {release.subtitle && (
              <div class="p1" data-subtitle>
                {release.subtitle}
              </div>
            )}
            <div class="p1" data-release-date>
              {release.released ? "Released " : "Releasing "}
              {release.releaseDatePretty}
            </div>
          </div>
        </div>
        <Divider />
        <div class="feature_grid">
          <div class="button-w">
            {release.released && release.spotifyLink && release.applemusicLink ? (
              <ButtonDisplay
            label="Listen"
            ariaLabel=`Listen to ${release?.title}`
            button
            />
            ) : (
              <ButtonDisplay
            href={release.presaveLink}
            label="Pre-save"
            ariaLabel=`Pre-save ${release?.title}`
            />
          )}
          </div>  
          <div class="p1 scroll-nudge" data-subtitle style="align-self: center;">
            Scroll to explore
          </div>
        </div>
      </div>
      <CatalogueModal release={release} />
    )
  }
  <div style="z-index: 5">
    <slot />
  </div>
</section>

<style lang="scss">
  @use "../../styles/vars" as *;

    .button-w {
    display: flex;
    justify-items: start;
  }
  .section-hero {
    z-index: 5;
    width: 100%;
    grid-column-gap: 10vh;
    flex-direction: column;
    margin-left: auto;
    margin-right: auto;
    padding-bottom: var(--padding-900);
    display: flex;
    position: relative;
    overflow: clip;
    background-color: var(--bg-dark);

    &.home {
      border-bottom-left-radius: var(--radius-large);
      border-bottom-right-radius: var(--radius-large);
      box-shadow: 0 10px 1rem 0.5rem $deepsea-25;
    }

    .background-w {
      z-index: 1;
      position: sticky;
      overflow: hidden;
      top: 0;
      height: 100vh;
      margin-bottom: -100vh;

      .bg-tint {
        z-index: 4;
        position: absolute;
        background-color: black;
        width: 100%;
        height: 100%;
        opacity: 0.3;
        will-change: opacity;
      }

      .bg-content {
        z-index: 3;
        position: absolute;
        width: 100%;
        height: 125vh;
        -o-object-fit: cover;
        object-fit: cover;
        top: 0;
        will-change: transform;

        &.video-w {
          img,
          video {
            position: absolute;
            width: 100%;
            height: 125vh;
            -o-object-fit: cover;
            object-fit: cover;
            top: 0;
          }

          &video {
            z-index: 4;
          }
        }
      }
    }

    .subsection-feature {
      z-index: 5;
      width: 100%;
      height: 100vh;
      max-height: 1200px;
      max-width: $desktop-max;
      padding-right: var(--page-margin);
      padding-bottom: calc(1rem + var(--page-margin));
      padding-left: var(--page-margin);
      gap: 3rem;
      flex-direction: column;
      justify-content: flex-end;
      align-items: stretch;
      margin-left: auto;
      margin-right: auto;
      display: flex;

      @media (max-width: $tablet) {
        gap: 2rem;
        height: 100svh;
      }

      .feature_grid {
        z-index: 5;
        width: 100%;
        gap: 3rem;
        grid-template-rows: auto;
        grid-template-columns: 2fr 1fr;
        grid-auto-columns: auto;
        grid-auto-flow: row;
        display: grid;
        position: relative;

        .heading-200 {
          opacity: 0.8;
        }

        [data-title] {
          max-width: 12ch;

          @media (max-width: $tablet) {
            grid-area: 1 / 1 / 2 / 3;
          }
        }

        @media (max-width: $tablet) {
          grid-template-columns: 1fr 1fr;
          gap: 2rem;
        }

        .meta-w {
          display: flex;
          flex-direction: column;
          justify-content: flex-end;
          gap: 0.25rem;
          padding-bottom: 0.4em;

          [data-release-type] {
            margin-bottom: 0.1rem;
          }

          @media (max-width: $tablet) {
            display: grid;
            grid-template-columns: 1fr 1fr;
            grid-template-rows: 1fr auto;
            -moz-column-gap: 2rem;
            column-gap: 2rem;
            row-gap: 0.375rem;
            grid-area: 2 / 1 / 2 / 3;

            [data-release-type] {
              font-size: 1rem;
              grid-area: 1 / 1 / 1 / 3;
            }

            [data-subtitle] {
              grid-area: 1 / 2 / 1 / 3;
            }

            [data-release-date] {
              grid-area: 2 / 1 / 2 / 3;
            }
          }

          @media (max-width: $mobile) {
            display: grid;
            grid-template-columns: 1fr 1fr;
            -moz-column-gap: 2rem;
            column-gap: 2rem;
            row-gap: 0.375rem;
            grid-area: 2 / 1 / 2 / 3;

            [data-release-type] {
              font-size: 1rem;
            }

            .p1 {
              grid-area: 1 / 2 / 1 / 2;
            }

            [data="release-status"] {
              display: none;
            }

            [data-release-type] {
              font-size: 1rem;
            }

            [data-subtitle] {
              grid-area: 2 / 1 / 2 / 3;
            }
          }
        }
      }
    }
  }
</style>

<script>
  import gsap from "gsap";
  import SplitType from "split-type";
  import { easingSmall, easingLarge } from "../../scripts/init";

  const heroSection = document.querySelector('.section-hero')!;

  function initHeroSection() {
    const streamButton = heroSection?.querySelector('button.button--display');
    const streamModal = heroSection?.querySelector('dialog');
    
    if (streamButton) {
      streamButton.addEventListener("click", () => {
        streamModal?.showModal();
      })
    }
    
    // Hero Background Parallax
    function heroParallax() {
      const heroSection = document.querySelector(".section-hero");
      if (heroSection) {
        const background = heroSection.querySelector(".bg-content");
        const tint = heroSection.querySelector(".bg-tint");

        if (background) {
          let heroTimeline = gsap.timeline({
            scrollTrigger: {
              trigger: ".section-hero",
              start: "top top",
              end: "bottom top",
              scrub: true,
            },
          });

          heroTimeline
            .to(
              background,
              {
                y: "-25vh",
                ease: "none",
              },
              0
            )
            .to(
              tint,
              {
                opacity: 1,
                ease: "none",
                immediateRender: false,
              },
              0
            );
        }
      }
    }
    heroParallax();
  }
  initHeroSection();

  function animateHeroSection() {
    const homepageVisited = sessionStorage.getItem("homepageVisited");

    // Setup Heading for Animation 
      const heading = heroSection.querySelector("h2")!;
      const splitHeading = SplitType.create(heading);
      gsap.set(splitHeading.words, {
        y: "0.75rem",
        opacity: 0,
      });

      function animateHeading() {
        gsap.to(splitHeading.words, {
          duration: 0.9,
          y: 0,
          opacity: 1,
          ease: easingSmall,
          stagger: {
            each: 0.2
          }
        })
      }

      // Setup Divider for Animation
      const divider = heroSection.querySelector(".divider-bg")! as HTMLElement;
      gsap.set(divider, {
        width: 0,
      });

      function animateDivider() {
        gsap.to(divider, {
          duration: 1.5,
          width: "100%",
          ease: easingLarge,
        })
      }

      // Setup Supporting Info for Animation
      const metaWrapper = heroSection.querySelector(".meta-w")!;
      const metaWrapperItems = metaWrapper.querySelectorAll("div")!;
      gsap.set(metaWrapperItems, {
        y: "0.5rem",
        opacity: 0,
      });

      function animateMetaWrapper() {
        gsap.to(metaWrapperItems, {
          duration: 0.8,
          y: 0,
          opacity: 1,
          ease: easingSmall,
          stagger: {
            each: 0.3
          }
        })
      }

      // Setup Button for Animation
      const button = heroSection.querySelector('.button--display')! as HTMLElement;
      gsap.set(button, {
        opacity: 0
      })

      function animateButton() {
        gsap.to(button, {
          y: 0,
          opacity: 1,
          duration: 0.15,
        })
      }

      // Setup Scroll Nudge for Animation
      const scrollNudge = heroSection.querySelector(".scroll-nudge")! as HTMLElement;
      const splitScrollNudge = SplitType.create(scrollNudge);
      gsap.set(splitScrollNudge.words, {
        y: "0.25rem",
        opacity: 0,
      });

      function animateScrollNudge() {
        gsap.to(splitScrollNudge.words, {
          duration: 1.5,
          y: 0,
          opacity: 1,
          ease: easingSmall,
          stagger: {
            each: 0.2,
          }
        });
      }

      // Hide Scrollnudge on scroll
      function hideScrollNudge() {
        if (window.scrollY >= 200) {
          gsap.to(scrollNudge, {
            opacity: 0,
            duration: 0.5,
            onComplete: () => {
              window.removeEventListener('scroll', hideScrollNudge)
            }
          })
        }
      }
      window.addEventListener('scroll', hideScrollNudge)

      // Setup GSAP Timeline
      const tl = gsap.timeline({
        scrollTrigger: {
          trigger: heroSection,
          start: "top 98%",
          end: "bottom 2%",
          once: true,
        },
      });

      if (window.innerWidth > 991) {
        // Desktop Layout
        tl.add(animateHeading, 1);
        tl.add(animateDivider, 2.25);
        tl.add(animateMetaWrapper, 3);
        tl.add(animateButton, 4);
        tl.add(animateScrollNudge, 4.75);
      } else {
        // Tablet/Mobile Layout
        tl.add(animateHeading, 1);
        tl.add(animateMetaWrapper, 2);
        tl.add(animateDivider, 2.25);
        tl.add(animateButton, 3.25);
        tl.add(animateScrollNudge, 5);
      }

    // Set Session Storage Flag
    sessionStorage.setItem("homepageVisited", "true");
  }
  animateHeroSection();

</script>