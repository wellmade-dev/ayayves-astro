---
interface Props {
  actionURL: string;
  buttonLabel: string;
}

const { actionURL, buttonLabel } = Astro.props as Props;
---

<form class="fields-w" method="POST" action={actionURL}>
  <slot />
  <input type="text" name="honeypot" aria-disabled />
  <div class="feedback-message"></div>
  <button type="submit" disabled>{buttonLabel}</button>
  <noscript>Please enable JavaScript for this form to work.</noscript>
</form>

<style lang="scss">
  .fields-w {
    display: flex;
    flex-direction: column;
    padding-top: 0.5rem;
    gap: 0.75rem;

    input[name="honeypot"] {
      display: none;
    }

    .feedback-message {
      padding: 1rem;
      font-size: 0.925rem;
      letter-spacing: 0.02em;
      line-height: 1.3;
      font-weight: 400;
      border-radius: var(--radius-extra-small);
      margin-top: 0.75rem;
      display: none;

      &.success {
        display: block;
        background-color: rgba(0, 128, 0, 0.2);
      }

      &.error {
        display: block;
        background-color: rgba(255, 0, 0, 0.15);
      }
    }

    button[type="submit"] {
      border-radius: var(--radius-circular);
      overflow: clip;
      background-color: var(--button-solid-bg);
      color: var(--button-solid-text);
      border: none;
      width: 100%;
      height: 2.5rem;
      transition: all 0.25s;
      font-size: 0.875rem;
      margin-top: 0.875rem;
      cursor: pointer;

      &:hover {
        opacity: 0.9;
      }

      &:disabled {
        opacity: 0.2;
        cursor: default;

        &:hover {
          opacity: 0.2;
        }
      }
    }
  }
</style>

<script>
  import axios from "axios";
  import { validateForm, handleFormError } from "../../../scripts/utils";

  const forms = document.querySelectorAll(`form`);
  forms.forEach((form) => {
    // Add responsive sizing to textarea element
    const textarea = form?.querySelector("textarea");
    if (textarea) {
      textarea.addEventListener("input", autoExpand);

      function autoExpand(this: HTMLTextAreaElement) {
        // Reset the height to shrink if text is deleted
        this.style.height = "0.9rem";

        // Set the height to the scroll height to expand as needed
        this.style.height = this.scrollHeight + "px";
      }
    }

    // Trigger validation whenever there's an input in the form fields
    form.addEventListener("input", () => {
      validateForm(form);
    });

    // Perform initial validation
    validateForm(form);

    // Add function to submit button
    form.addEventListener("submit", submitForm);
  });

  let contactFormErrorCount = 0; // Error count for this specific form

  function submitForm(event, form) {
    // Prevent default form submission
    event.preventDefault();

    var honeypotField = form.find('[name="honeypot"]');
    var feedbackMessage = form.find(".feedback-message");
    var submitButton = form.find('button[type="submit"]');

    if (honeypotField.val().trim() != "") {
      console.log("I see you.");
      return;
    }

    // Store original button text then send
    const submitLabel = submitButton.text();
    submitButton.textContent = "Sending...";

    axios
      .post(form.action, new FormData($form))
      .then((response) => {
        console.log("Success:", response);
      })
      .catch((error) => {
        console.log("Error:", error);
      });
  }
</script>
