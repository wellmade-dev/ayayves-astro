---
interface Props {
	title?: string;
	subtitle?: string;
	type: string;
}

const { title, subtitle, type } = Astro.props as Props;
---

<dialog class="modal" data-modal={type} data-lenis-prevent>
	<div class="modal-inner" data-theme="light">
		{
			title && (
				<div class="header">
					<div class="heading-w">
						<div class="heading">{title}</div>
						<button data-close-modal class="close-button">
							<svg
								width="16"
								height="10"
								viewBox="0 0 16 10"
								fill="none"
								xmlns="http://www.w3.org/2000/svg"
							>
								<path
									d="M1 0.999997L6.83333 6.83333L8 8L15 0.999997"
									stroke="#021117"
									stroke-width="2"
								/>
							</svg>
						</button>
					</div>
					<div class="p2">{subtitle}</div>
				</div>
			)
		}
		<div class="content">
			<slot />
		</div>
	</div>
</dialog>

<style lang="scss" is:global>
	@use "../../../styles/vars" as *;
	@use "../../../styles/modal" as *;

	// Mix-ins are used on modals instead of class rules because these same rules need to be applied to classes on the CDN based Snipcart Cart Modal.
	.modal {
		@include modal;

		&::backdrop {
			@include modal-backdrop;
		}

		&[open] {
			@include modal-open-animation;

			&::backdrop {
				@include modal-open-backdrop-animation;
			}
		}

		&[closing] {
			@include modal-close-animation;

			&::backdrop {
				@include modal-close-backdrop-animation;
			}
		}

		.modal-inner {
			@include modal-inner;
		}
	}

	.header {
		width: 100%;
		display: flex;
		flex-direction: column;

		.heading-w {
			display: flex;
			flex-direction: row;
			width: 100%;
			justify-content: space-between;
			align-items: center;
			gap: 0.325rem;
			letter-spacing: -0.02em;

			.heading {
				font-size: 1.875rem;
				font-weight: 500 !important;
			}

			.p2 {
				color: var(--text-secondary);
			}
		}

		button {
			padding: 0.45rem 0.125rem;
			opacity: 0.5;
			cursor: pointer;

			&:hover {
				opacity: 0.75;
			}
		}
	}

	.content {
		.button {
			margin-top: 0.925rem;
			height: 2.5rem;
			width: 100%;
		}

		.stream-links {
			display: flex;
			flex-direction: column;
			padding-top: 0.25rem;

			.stream-link-w {
				display: flex;
				flex-direction: column;
			}

			.stream-link {
				display: flex;
				flex-direction: row;
				justify-content: space-between;
				align-items: center;
				padding: 1.75rem 0.375rem 0.825rem 0.05rem;
			}

			.platform-title {
				font-size: 1.05rem;
				font-weight: 400;
			}
		}
	}

	// Animation Keyframes
	@keyframes reveal-modal {
		0% {
			transform: translateY(130%);
		}
		100% {
			transform: translateY(0%);
		}
	}

	@keyframes dismiss-modal {
		0% {
			transform: translateY(0%);
		}
		100% {
			transform: translateY(130%);
		}
	}

	@keyframes fade-in {
		0% {
			background-color: rgba(0, 0, 0, 0);
			backdrop-filter: blur(0px);
		}
		100% {
			background-color: rgba(0, 0, 0, 0.5);
			backdrop-filter: blur(7.5px);
		}
	}

	@keyframes fade-out {
		0% {
			background-color: rgba(0, 0, 0, 0.5);
			backdrop-filter: blur(7.5px);
		}
		100% {
			background-color: rgba(0, 0, 0, 0);
			backdrop-filter: blur(0px);
		}
	}
</style>

<script>
	import { togglePageScroll } from "../../../scripts/utils";
	const modals = document.querySelectorAll("dialog");

	function dismissModal(modal: HTMLDialogElement) {
		modal.setAttribute("closing", "");
		modal.addEventListener(
			"animationend",
			() => {
				modal.close();
				modal.removeAttribute("closing");
			},
			{ once: true }
		);
	}

	modals.forEach((modal) => {
		const closeButton = modal.querySelector(".close-button");
		closeButton?.addEventListener("click", () => {
			dismissModal(modal);
		});

		modal.addEventListener("cancel", (event) => {
			event.preventDefault();
			dismissModal(modal);
		});

		modal.addEventListener("click", (event) => {
			if ((event.target as Element).nodeName === "DIALOG") {
				dismissModal(modal);
			}
		});
	});
</script>
