---
import ModalSkeleton from "./ModalSkeleton.astro";
import FormField from "./FormField.astro";
import ModalForm from "./ModalForm.astro";
const PUBLIC_STRAPI_API_URL = import.meta.env.PUBLIC_STRAPI_API_URL;

const title = "Contact";
const subtitle = "Fill in your details and I'll be in touch.";
const buttonLabel = "Send Message";
---

<ModalSkeleton type="contact" title={title} subtitle={subtitle} ,>
	<ModalForm
		actionURL=`${PUBLIC_STRAPI_API_URL}contact/send`
		buttonLabel={buttonLabel}
	>
		<FormField
			type="text"
			name="name"
			placeholder="First & Last Name *"
			required
		/>
		<FormField type="text" name="business" placeholder="Business Name" />
		<FormField
			type="email"
			name="email"
			placeholder="Email Address *"
			required
		/>
		<FormField type="number" name="phone" placeholder="Phone Number" />
		<FormField
			type="textarea"
			name="message"
			placeholder="Message *"
			required
		/>
	</ModalForm>
</ModalSkeleton>

<script>
	import axios from "axios";
	import {
		togglePageScroll,
		handleFormSuccess,
		handleFormError,
	} from "../../../scripts/utils";

	// Variable Declarations
	const contactModal = document.querySelector<HTMLDialogElement>(
		'dialog[data-modal="contact"]'
	)!;
	const contactButtons = document.querySelectorAll(
		'button[data-modal="contact"]'
	);

	// Add Event Listeners to all Contact Buttons
	contactButtons.forEach((contactButton) => {
		contactButton.addEventListener("click", () => {
			togglePageScroll(false);
			contactModal?.showModal();
		});
	});

	// Handle Contact Form Submission
	const form = contactModal.querySelector("form")!;
	form.addEventListener("submit", submitForm);

	function submitForm(event: SubmitEvent): void {
		// Prevent default form submission
		event.preventDefault();

		const form = event.target as HTMLFormElement;
		const honeypotField =
			form.querySelector<HTMLInputElement>('[name="honeypot"]');
		const submitButton = form.querySelector<HTMLButtonElement>(
			'button[type="submit"]'
		)!;

		if (honeypotField && honeypotField.value.trim() !== "") {
			console.log("I see you.");
			return;
		}

		// Store original button text then send
		const originalSubmitLabel = submitButton.textContent!;
		submitButton.textContent = "Sending...";

		// Create a JSON object from form data
		const formData = new FormData(form);
		const jsonData = {
			EMAIL: formData.get("EMAIL"),
			MCFNAME: formData.get("MCFNAME"),
			MCLNAME: formData.get("MCLNAME"),
			MCCITY: formData.get("MCCITY"),
			honeypot: formData.get("honeypot"),
		};

		axios
			.post(form.action, jsonData, {
				headers: {
					"Content-Type": "application/json",
				},
			})
			.then((response) => {
				// Set all fields to hidden and wipe
				handleFormSuccess({
					formElement: form,
					successMessage:
						"Thanks so much for subscribing. I'll be touch soon.",
					buttonLabel: originalSubmitLabel,
					clearForm: true,
					hideForm: true,
				});
			})
			.catch((error) => {
				console.log("Error:", error);

				if (error.response && error.response.data) {
					const errorData = error.response.data;
					if (
						errorData.details &&
						errorData.details.title === "Member Exists"
					) {
						// If user already exists in MC, then handle as a success despite technical error
						handleFormSuccess({
							formElement: form,
							successMessage:
								"Thank you for signing up but it looks like you're already subscribed.",
							buttonLabel: originalSubmitLabel,
							clearForm: true,
							hideForm: true,
						});
					} else {
						handleFormError({
							formElement: form,
							errorMessage:
								"Something's gone wrong, please try again.",
							buttonLabel: "Try Again",
						});
					}
				} else {
					handleFormError({
						formElement: form,
						errorMessage:
							"Something's gone wrong, please try again.",
						buttonLabel: "Try Again",
					});
				}
			});
	}
</script>
