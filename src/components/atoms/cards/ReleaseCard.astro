---
import type { CatalogueAttributes } from "../../../types/strapi-attributes";
import ImageWellmade from "../ImageWellmade.astro";
import DiagonalArrowSVG from "../svgs/DiagonalArrowSVG.astro";

const { release } = Astro.props as { release: CatalogueAttributes };
const ariaLabel = `Learn more about ${release.title}`;
---

<a
  class="release-card"
  href=`/catalogue/${release.slug}`
  aria-label={ariaLabel}
>
  <div class="bg-tint"></div>
  <div class="bg-gradient"></div>
  <ImageWellmade image={release.coverImage} sizes="360px" />
  <div class="desc-w">
    <div class="heading-300">{release.title}</div>
    <div class="p2">{release.subtitle}</div>
    <div class="listen-button-w">
      <div class="button--listen" style="opacity: 1;">
        <div
          class="label"
          style="translate: none; rotate: none; scale: none; transform: translate(0px, 0px);"
        >
          Stream
        </div>
        <DiagonalArrowSVG />
      </div>
    </div>
  </div>
</a>

<style lang="scss">
  @use "../../../styles/vars" as *;

  .release-card {
    display: flex;
    height: 100%;
    flex-direction: column;
    position: relative;
    justify-content: flex-end;
    flex-grow: 0;
    border-radius: var(--radius-small);
    overflow: clip;
    padding: 1.375rem 1.25rem;
    transition: all 0.5s;
    transform: translate(0);

    .desc-w {
      gap: 0.2rem;
      z-index: 4;
      display: flex;
      flex-direction: column;
      padding-right: 0.75rem;

      .heading-300 {
        font-size: 1rem;
        text-wrap: pretty;
      }

      .p2 {
        color: var(--text-secondary);
      }

      .listen-button-w {
        display: flex;
        padding-top: 0.5rem;
        justify-items: flex-start;

        .button--listen {
          display: flex;
          flex-direction: row;
          gap: 0.625rem;
          align-items: center;
          margin-left: -1rem;
          margin-bottom: -1rem;
          width: 100%;
          padding: 1rem;

          .label {
            font-size: 1rem;
          }
        }
      }
    }

    img {
      position: absolute;
      top: 0;
      left: 0;
      bottom: auto;
      right: 0;
      height: 120%;
      width: 100%;
      z-index: 1;
      -o-object-fit: cover;
      object-fit: cover;
      scale: 1.025;
    }

    .bg-tint {
      background-color: black;
      opacity: 0.3;
      z-index: 2;
      height: 100%;
      width: 100%;
      position: absolute;
      top: 0;
      left: 0;
      pointer-events: none;
    }

    .bg-gradient {
      background: linear-gradient(
        180deg,
        rgba(0, 0, 0, 0) 0%,
        rgba(0, 0, 0, 0.4) 100%
      );
      opacity: 0;
      z-index: 3;
      height: 10rem;
      width: 100%;
      position: absolute;
      bottom: 0;
      left: 0;
      pointer-events: none;
    }
  }
</style>

<script>
  import gsap from "gsap";
  import { easingSmall } from "../../../scripts/init";

  function releaseCardHover() {
    const releaseCards = document.querySelectorAll(".release-card");

    releaseCards.forEach((releaseCard) => {
      const image = releaseCard.querySelector("img");
      const buttonWrapper = releaseCard.querySelector(
        ".listen-button-w"
      ) as HTMLElement;
      const buttonWrapperHeight = buttonWrapper?.offsetHeight;
      const button = releaseCard.querySelector(".button--listen");
      const descriptionWrapper = releaseCard.querySelector(".desc-w");
      const bgTint = releaseCard.querySelector(".bg-tint");
      const bgGradient = releaseCard.querySelector(".bg-gradient");
      const buttonSVG = releaseCard.querySelector("svg");

      const rem = 16;

      gsap.set(descriptionWrapper, { y: buttonWrapperHeight });
      gsap.set(button, { opacity: 1 });

      releaseCard.addEventListener("mouseenter", () => {
        gsap.to(image, { scale: 1, ease: "power2.out", duration: 0.6 });
        gsap.to(descriptionWrapper, {
          y: 0,
          ease: easingSmall,
          duration: 0.5,
        });
        gsap.to(bgTint, { opacity: 0.4, ease: easingSmall, duration: 0.5 });
        gsap.to(bgGradient, { opacity: 1, ease: easingSmall, duration: 0.5 });
      });

      button?.addEventListener("mouseenter", () => {
        gsap.to(button, { opacity: 0.75, ease: easingSmall, duration: 0.3 });
        gsap.to(buttonSVG, { x: 2, y: -2, ease: easingSmall, duration: 0.3 });
      });

      releaseCard.addEventListener("mouseleave", () => {
        gsap.to(image, { scale: 1.025, ease: easingSmall, duration: 0.6 });
        gsap.to(descriptionWrapper, {
          y: buttonWrapperHeight,
          ease: easingSmall,
          duration: 0.6,
        });
        gsap.to(bgTint, { opacity: 0.3, ease: easingSmall, duration: 0.6 });
        gsap.to(bgGradient, { opacity: 0, ease: easingSmall, duration: 0.6 });
      });

      button?.addEventListener("mouseleave", () => {
        gsap.to(button, { opacity: 0.9, ease: easingSmall, duration: 0.3 });
        gsap.to(buttonSVG, { x: 0, y: 0, ease: easingSmall, duration: 0.3 });
      });
    });
  }

  releaseCardHover();
</script>
