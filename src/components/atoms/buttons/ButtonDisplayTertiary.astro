---
import StarSVG from "../svgs/StarSVG.astro";

interface Props {
	label: string;
	ariaLabel?: string;
	href?: string;
	disabled?: boolean;
}

const { label, ariaLabel, href, disabled } = Astro.props as Props;
---

{
	disabled ? (
		<div class="button--display tertiary disabled" aria-disabled="true">
			<div class="label">{label}</div>
		</div>
	) : (
		<a class="button--display tertiary" aria-label={ariaLabel} href={href}>
			<div class="star-w left">
				<StarSVG width="0.75rem" />
			</div>
			<div class="label">{label}</div>
			<div class="star-w right">
				<StarSVG width="0.75rem" />
			</div>
		</a>
	)
}

<style lang="scss">
	.button--display.tertiary {
		$svg-width: 0.75rem;
		$gap: 0.5rem;
		gap: $gap;
		color: var(--button-solid-text);
		background-color: var(--button-solid-bg);
		border-radius: var(--radius-circular);
		border-width: 0;
		justify-content: center;
		align-items: center;
		padding: 0 1rem;
		transition: all 0.25s;
		display: flex;
		position: relative;
		overflow: clip;
		transform: translate(0);
		font-family: var(--neue-montreal);
		font-size: 0.875rem;
		font-style: unset;
		font-weight: 400;
		letter-spacing: 0.01em;
		height: 2rem;
		transition: all 0.3s cubic-bezier(0.77, 0, 0.18, 1);

		&:hover {
			.star-w {
				transform: translateX(calc($svg-width + $gap));

				&.left {
					opacity: 1;
				}

				&.right {
					opacity: 0;
				}
			}

			.label {
				transform: translateX(calc($svg-width + $gap - 0.1rem));
			}
		}

		.label {
			transition: all 0.3s cubic-bezier(0.77, 0, 0.18, 1);
		}

		.star-w {
			height: 100%;
			flex: none;
			align-items: center;
			display: flex;
			width: $svg-width;
			transition: all 0.3s cubic-bezier(0.77, 0, 0.18, 1);

			&.left {
				position: absolute;
				top: auto;
				bottom: auto;
				left: calc(-0.5 * $svg-width);
				right: auto;
				opacity: 0;
			}
		}

		&.disabled {
			background-color: unset;
			color: var(--text-disabled);
			border: 1px solid var(--text-disabled);
			cursor: default;
		}
	}
</style>
