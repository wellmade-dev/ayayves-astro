---
import Navigation from "../components/navigation/Navigation.astro";
import FooterSection from "../components/sections/FooterSection.astro";
import ContactModal from "../components/atoms/modals/ContactModal.astro";
import MailchimpModal from "../components/atoms/modals/MailchimpModal.astro";
const HOSTNAME = import.meta.env.HOSTNAME;

interface Props {
	title: string;
	description: string;
	slug: string;
	imageURL: string;
	compactNavBar?: boolean;
}

const { title, description, slug, imageURL, compactNavBar } = Astro.props;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<title>{title}</title>
		<meta name="description" content={description} />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta property="og:title" content={title} />
		<meta property="og:description" content={description} />
		<meta property="og:image" content={imageURL} />
		<meta property="og:url" content=`${HOSTNAME}/${slug}` />
		<meta property="og:type" content="website" />
	</head>
	<body>
		{compactNavBar ? <Navigation mobileOnDesktop /> : <Navigation />}
		<main class="hidden">
			<slot />
			<FooterSection />
		</main>
		<ContactModal />
		<MailchimpModal />
		<script>
			import "../scripts/init.js";
			import { initSnipcart } from "../scripts/snipcart";
			initSnipcart();

			// Page Transitions
			const mainContent = document.querySelector("main")!;
			const nav = document.querySelector("nav");

			// On Page Transition Out
			document.addEventListener("DOMContentLoaded", function () {
				// Initial Pageload
				setTimeout(() => {
					mainContent.classList.remove("hidden");
				}, 100);

				document.querySelectorAll("a").forEach(function (link) {
					link.addEventListener("click", function (e) {
						const targetElement =
							e.target instanceof Element ? e.target : null;
						if (
							link.hostname === window.location.hostname &&
							!link.hash &&
							link.target !== "_blank" &&
							targetElement &&
							!targetElement.closest(".release-card")
						) {
							e.preventDefault();
							const destination = link.href;
							mainContent.classList.add("transition-out");

							// List for the transition to complete before redirecting
							mainContent.addEventListener(
								"transitionend",
								function onAnimationEnd() {
									window.location.href = destination;
									mainContent.removeEventListener(
										"transitionend",
										onAnimationEnd
									);
								}
							);
						}
					});
				});
			});
		</script>
		<style is:global lang="scss">
			@use "../styles/vars" as *;
			@import "/src/styles/global.scss";

			main {
				transition: 0.8s cubic-bezier(0.58, 0.21, 0, 0.96);

				&.transition-out {
					opacity: 0;
					transform: translateY(-1rem);
				}

				&.hidden {
					opacity: 0;
					transform: translateY(1rem);
				}
			}
		</style>
	</body>
</html>
